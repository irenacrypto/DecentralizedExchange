// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract DecentralizedExchange {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    address public admin;
    IERC20 public token;

    event TokensSwapped(address indexed user, uint256 inputAmount, uint256 outputAmount);

    constructor(address _token) {
        admin = msg.sender;
        token = IERC20(_token);
    }

    function swapTokens(uint256 amountIn, uint256 amountOut) external {
        require(amountIn > 0, "Input amount must be greater than zero");
        require(amountOut > 0, "Output amount must be greater than zero");

        token.safeTransferFrom(msg.sender, address(this), amountIn);
        token.safeTransfer(msg.sender, amountOut);

        emit TokensSwapped(msg.sender, amountIn, amountOut);
    }

    function withdrawTokens(uint256 amount) external {
        require(msg.sender == admin, "Only admin can withdraw tokens");

        token.safeTransfer(admin, amount);
    }

    function getTokenBalance() external view returns (uint256) {
        return token.balanceOf(address(this));
    }
}
